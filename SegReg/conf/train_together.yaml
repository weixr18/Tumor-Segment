# Sample configuration file for training a 3D U-Net on a task of predicting the nuclei in 3D stack from the lightsheet
# microscope. Training done with Binary Cross-Entropy.
# Training and validation data can be downloaded from: https://osf.io/thxzn/

# use a fixed random seed to guarantee that when you run the code twice you will get the same outcome
manual_seed: 0
multi_head: false
baseline_model: true

# model configuration
model:
  # whether use separable conv. This will DISABLE group_num.
  use_separable: true
  # use batch normalization
  use_batch_norm: false
  # number of groups in the groupconv
  group_num: 1
  # encoder feature map channels
  encoder_channels: [16, 32, 32, 32]
  # encoder_channels: [8, 16, 16, 32]
  # decoder feature map channels
  decoder_channels: [32, 32, 32, 32, 8, 8]
  # decoder_channels: [32, 32, 16, 16, 8, 8],

  # model class, e.g. UNet3D, ResidualUNet3D
  # name: ResidualUNet3D
  # number of input channels to the model
  # in_channels: 3
  # number of output channels
  # out_channels: 2
  # determines the order of operators in a single layer (gcr - GroupNorm+Conv3d+ReLU)
  # layer_order: gcr
  # number of features at each level of the U-Net
  # f_maps: [32, 64, 64, 128]
  # number of groups in the groupnorm
  # num_groups: 16
  # apply element-wise nn.Sigmoid after the final 1x1 convolution, otherwise apply nn.Softmax
  # this is only relevant during inference, during training the network outputs logits and it is up to the loss function
  # to normalize with Sigmoid or Softmax
  # final_sigmoid: true
  # if True applies the final normalization layer (sigmoid or softmax), otherwise the networks returns the output from the final convolution layer; use False for regression problems, e.g. de-noising
  # is_segmentation: true

# trainer configuration
trainer:
  # whether train the baseline model
  baseline_model: false
  # whether the input image has been distance transformed
  transformed: true
  # path to the checkpoint directory
  checkpoint_dir: "/mnt/newdisk0/wxr/logs" #single
  # path to latest checkpoint; if provided the training will be resumed from that checkpoint
  # pre_trained: "/home/cwx/Datasets/rs_going/best_checkpoint.pytorch" #"/home/cwx/Datasets/single_2/best_checkpoint.pytorch"
  
  # how many iterations between validations
  validate_after_iters: 200
  # how many iterations between tensorboard logging
  log_after_iters: 100
  # max number of epochs
  epochs: 300
  # max number of iterations
  iters: 80000
  # model with higher eval score is considered better
  eval_score_higher_is_better: True

  multi_head: false

# loss function configuration
loss:
  # use BCE loss for training
  name: BCEDiceLoss
  # skip last channel in the target containing the labeled nuclei instances
  #skip_last_target: false

# optimizer configuration
optimizer:
  # initial learning rate
  learning_rate: 0.00001
  # weight decay
  weight_decay: 0.0001

# evaluation metric
eval_metric:
  # use average precision metric
  name: DiceCoefficient

  # values on which the nuclei probability maps will be thresholded for AP computation
  #thresholds: [0.4, 0.5, 0.6, 0.7, 0.8]
  #metric: 'ap'

# learning rate scheduler configuration
lr_scheduler:
  # reduce learning rate when evaluation metric plateaus
  name: ReduceLROnPlateau
  # use 'max' if eval_score_higher_is_better=True, 'min' otherwise
  mode: max
  # factor by which learning rate will be reduced
  factor: 0.1
  # number of *validation runs* with no improvement after which learning rate will be reduced
  patience: 5

# data loaders configuration
loaders:
  # class of the HDF5 dataset, currently StandardHDF5Dataset and LazyHDF5Dataset are supported.
  # When using LazyHDF5Dataset make sure to set `num_workers = 1`, due to a bug in h5py which corrupts the data
  # when reading from multiple threads.
  dataset: RSModelHDF5Dataset
  # batch dimension; if number of GPUs is N > 1, then a batch_size of N * batch_size will automatically be taken for DataParallel
  batch_size: 1
  # how many subprocesses to use for data loading
  num_workers: 8
  # path to the raw data within the H5
  raw_internal_path: raw #raw-label
  # path to the the label data within the H5
  label_internal_path: label
  # path to the pixel-wise weight map withing the H5 if present
  weight_internal_path: null
  # configuration of the train loader
  train:
    # paths to the training datasets
    file_paths:
      #- 'conf/fake.list'
      - 'conf/train_rs.list'
      #- '/home/adrian/Datasets/LateralRootPrimordia/t00045_s01_uint8_cropped_gt.h5'
    transformer:
      raw:
        # subtract mean and divide by std dev
        - name: Standardize
        # randomly flips the volume in one of the axis
        - name: RandomFlip
        # randomly rotates the volume with 90 deg across a randomly chosen plane
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          # rotates by choosing random angle from [-30, 30] deg
          angle_spectrum: 30
          mode: reflect
        - name: ElasticDeformation
          spline_order: 3
        - name: RandomContrast
        # apply additive Gaussian noise
        #- name: AdditiveGaussianNoise
        # apply additive Poisson noise
        - name: AdditivePoissonNoise
        - name: ToTensor
          expand_dims: true
      label:
        - name: RandomFlip
        - name: RandomRotate90
        - name: RandomRotate
          # rotate only in ZY plane due to anisotropy
          axes: [[2, 1]]
          angle_spectrum: 45
          mode: reflect
        - name: ElasticDeformation
          spline_order: 0
          # convert target volume to binary mask
        - name: BlobsToMask
          # append ground truth labels in the last channel of the target for evaluation metric computation
          append_label: true
          # if 'true' appends boundary mask as a 2nd channel of the target; boundaries are computed using the 'find_boundaries()' function from skimage
          # learning the boundaries as a 2nd objective sometimes helps with the nuclei mask prediction
          boundary: false
        - name: ToTensor
          expand_dims: false

  # configuration of the val loader
  val:
    # paths to the val datasets
    file_paths:
      #- 'conf/fake.list'
      - 'conf/test_rs.list'

    # data augmentation
    transformer:
      raw:
        - name: Standardize
        - name: ToTensor
          expand_dims: true
      label:
        - name: BlobsToMask
          append_label: true
          boundary: false
        - name: ToTensor
          expand_dims: false
